name: Update YouTube Videos Cache

on:
  schedule:
    # Run 8 times a day (every 3 hours): 00:00, 03:00, 06:00, 09:00, 12:00, 15:00, 18:00, 21:00 UTC
    - cron: '0 0,3,6,9,12,15,18,21 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  update-cache:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install axios
        
      - name: Fetch YouTube videos and update cache
        run: |
          cat > fetch-videos.mjs << 'EOF'
          import fs from 'fs';
          import axios from 'axios';
          
          const YOUTUBE_CHANNEL_ID = 'UCPuYa6IFOW3zcVxH1bRXa8g'; // @sacramentoshia6230
          const RSS_URL = \`https://api.rss2json.com/v1/api.json?rss_url=https://www.youtube.com/feeds/videos.xml?channel_id=\${YOUTUBE_CHANNEL_ID}\`;
          
          async function fetchVideos() {
            try {
              console.log('Fetching videos from RSS2JSON...');
              const response = await axios.get(RSS_URL, {
                timeout: 10000,
                headers: {
                  'User-Agent': 'SSMA-Website/1.0'
                }
              });
              
              if (response.data.status !== 'ok') {
                throw new Error('RSS2JSON API returned error status');
              }
              
              // Function to test which thumbnail quality is available
              const getBestThumbnail = async (videoId) => {
                const thumbnailQualities = ['maxresdefault', 'hqdefault', 'mqdefault', 'sddefault', 'default'];
                
                for (const quality of thumbnailQualities) {
                  const thumbnailUrl = \`https://img.youtube.com/vi/\${videoId}/\${quality}.jpg\`;
                  try {
                    const response = await axios.head(thumbnailUrl, { timeout: 3000 });
                    if (response.status === 200) {
                      console.log(\`Using \${quality} thumbnail for \${videoId}\`);
                      return thumbnailUrl;
                    }
                  } catch (error) {
                    // Continue to next quality
                  }
                }
                
                // Final fallback
                return \`https://img.youtube.com/vi/\${videoId}/hqdefault.jpg\`;
              };

              // Process videos with thumbnail detection
              const videos = [];
              for (const item of response.data.items.slice(0, 10)) {
                const videoIdMatch = item.link.match(/(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([^&\\n?#]+)/);
                const videoId = videoIdMatch ? videoIdMatch[1] : '';
                
                console.log(\`Processing: \${item.title}\`);
                const bestThumbnail = await getBestThumbnail(videoId);
                
                videos.push({
                  id: item.guid || videoId,
                  title: item.title,
                  description: item.description || '',
                  thumbnail: bestThumbnail,
                  publishedAt: item.pubDate,
                  videoId: videoId,
                  channelTitle: response.data.feed.title || 'Sacramento Shia',
                  link: item.link
                });
              }
              
              const cacheData = {
                videos: videos,
                lastUpdated: new Date().toISOString(),
                status: 'success'
              };
              
              // Create public directory if it doesn't exist
              if (!fs.existsSync('public')) {
                fs.mkdirSync('public', { recursive: true });
              }
              
              // Write cache file
              fs.writeFileSync('public/youtube-cache.json', JSON.stringify(cacheData, null, 2));
              console.log(\`Successfully cached \${videos.length} videos\`);
              
              return true;
            } catch (error) {
              console.error('Error fetching videos:', error.message);
              
              // Create error cache
              const errorCache = {
                videos: [],
                lastUpdated: new Date().toISOString(),
                status: 'error',
                error: error.message
              };
              
              // Create public directory if it doesn't exist
              if (!fs.existsSync('public')) {
                fs.mkdirSync('public', { recursive: true });
              }
              
              fs.writeFileSync('public/youtube-cache.json', JSON.stringify(errorCache, null, 2));
              console.log('Created error cache file');
              
              return false;
            }
          }
          
          fetchVideos().then(success => {
            process.exit(success ? 0 : 1);
          });
          EOF
          node fetch-videos.mjs
          
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add public/youtube-cache.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update YouTube videos cache - $(date)"
            git push
          fi
